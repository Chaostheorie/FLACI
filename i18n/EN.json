{
	"IMPRESS": "About",
	"LOGIN": "Login",
	"LOGOUT": "Logout",
	"HOME": "Home",
	"USERACCOUNT": "Account",
	"CONTACT": "Contact",
	"MODULELANGUAGES": "Formal languages",
	"MODULEKFGEDIT": "Context-free grammars",
	"MODULEREGEXPEDIT": "Regular expressions",
	"MODULEAUTOEDIT": "Abstract automata",
	"MODULETDIAG": "Compilers and interpreters",
	"EXAMPLECOLLECTION": "Examples",
	"ADMINISTRATION": "Admin",
	"CANCEL": "Cancel",
	"SAVE": "Save",
	"DELETE": "Delete",
	"FOLDER": "Folder",
	"NEWFOLDER": "New Folder",
	"FOLDERNAME": "Foldername",
	"PUBLISH": "Publish",
	"MAKECOPY": "Make a copy",
	"PUBLICCOLLECTION": "Public collection",
	"FORGOTPASSWORD": "Forgot your password?",
	"EMAIL": "Email",
	"PASSWORD": "Password",
	"PASSWORDREPEAT": "Reenter your password",
	"NEWPASSWORD": "New password",
	"SAVEPASSWORD": "Save password",
	"RESETPASSWORD": "Reset password",
	"REGISTERNEW": "Register account",
	"REGISTER": "Register",
	"NAME": "Name",
	"SURNAME": "Surname",
	"ALPHABET": "Alphabet",
	"HINT": "Hint",
	"DESCRIPTION": "Description",
	"RESULT": "Result",
	"ERROR": "Error",
	"UNDO": "Undo last change",
	"REDO": "Redo last change",
	"LASTCHANGE": "Last change",
	"MENUCHANGE": "Change",
	"MENUDUPLICATE": "Duplicate",
	"MENUPUBLISH": "Publish",
	"MENUUNPUBLISH": "Unpublish",
	"MENULINK": "Weblink",
	"MENUDELETE": "Delete",
	"PASSWORTEMAILSUBJECT": "Forgot FLACI password",
	"SENDCONFIRM": "The email was sent. Please check both your mailbox and also your spam folder.",
	"PASSWORTEMAILBODY": "Dear user,\n\na password reset request was made. If you did not initiate this request yourself, you can ignore this email. If you'd like to reset your password at FLACI now, click on the subsequent link or copy it into your browser:\n\n{{LINK}}\n\nKind regards,\nyour FLACI-Team",
	"BOOK": {
		"AUTHORS": "Autors: Wagenknecht, Christian / Hielscher, Michael",
		"CONTENTTEXT1": "The more abstract contents of theoretical computer science are motivated by practical examples out clearly taught and consolidated in exercises. The whole text of the book runs through the project to develop a compiler for a language for graphical effects. The necessary contributions are progressively created and aspects of automated compiler generation are discussed.",
		"TITLE": "Formal languages, abstract automata and compilers",
		"SUBTITLE": "Textbook for undergraduate studies",
		"CONTENT": "Contents",
		"CONTENTTEXT2": "For modeling of formal languages, regular expressions, abstract automata and for automated compiler generation from a graphic-visual description AtoCC provides mutual interconnected components. The learning and working environment AtoCC was developed specifically for the study of theoretical computer science and already successfully used at several universities and schools. AtoCC deepened theoretical knowledge through practical exercises and attractive application projects from the graphics and audio. Translation and processing more or less complicated languages, we now find, for example, also in modern web applications.",
		"TOPICS": "Topics",
		"TOPICSTEXT": "Structure of programs - Fundamental terms - Definitions of infinite sets - Compilers - Finite automata - Regular languages and regular expressions - Pushdown automata and context-free languages - LL(k) langauges - LR(K) languages - Parser and parser generators - Project on language translation - Mealy- and Moore machines - Turing machine and Chomsky-type-0/1 languages",
		"TARGET": "Target audience",
		"TARGETTEXT": "Computer science students at universities of applied science, mainly research oriented universities, and universities of cooperative education as well as teachers at extended secondary schools (gymnasia)."
	},
	"LANGUAGES": {
		"ALPHABETANDCHARACTERS": "Alphabet and symbol",
		"WORD": "Word",
		"DEFALPHABET": "An <i>alphabet</i> is any finite and non empty set of <i>symbols</i>.",
		"DEFWORD": "A <i>word w</i> over an <i>alphabet A</i> is a finite sequence, or string, of zero or more symbols taken from <i>A</i>. Îµ simply stands for the <i>empty word</i> \"\".",
		"NEXTTOWORD": "Continue to word",
		"ALHABETCHARS": "Enter symbols separated with commas.",
		"BUILDWORDHINT": "Repeatedly left-click a symbol to gradually construct a particular word.",
		"WORDSET": "Set of words",
		"LANGUAGE": "Language",
		"DEFLANGUAGE": "A <i>language L&sube;A<sup>*</sup></i> is a set of words over <i>A</i>. It is either a finite or a countable infinite set.",
		"DEFWORDSET": "The <i>set of words A<sup>*</sup></i> is the set of <i>all</i> words over an alphabet <i>A</i>, including the <i>empty word &epsilon;</i>.",
		"SELECTALPHABET": "Choose one of the alphabets as follows to experiment with.",
		"CREATESELF": "is defineable by the learner.",
		"DELETECHARSHINT": "Left-click a symbol to remove it.",
		"NEXTTOWORDLENGTH": "Continue to set of words",
		"DEFWORDLENGTH": "The <i>length of a word w</i>, |<i>w</i>| for short, is the number of symbols in it.",
		"WORDLENGTH": "Length of the word",
		"SHOWMOREITEMS": "Show more items",
		"NEXTTOLANGUAGE": "Continue to language",
		"BUILDLANGUAGEHINT": "Form a language <i>L</i> by left-clicking of some particular words of <i>A<sup>*</sup></i>.",
		"DEFLANGUAGELIMITS": "Formal languages which are provided for practical applications are usually countable infinite. How can they be definined?",
		"ALTERNATIVEHINT": "Some countable infinite languages can be definied for example as follows",
		"ALLWORDSSTARTINGWITH": "<i>L<sub>1</sub></i> = all words of <i>A<sup>*</sup></i> that start with the symbol",
		"ALLWORDSSTARTINGWITHEND": ".",
		"ALLWORDSSHORTERTHEN": "<i>L<sub>2</sub></i> = all words of <i>A<sup>*</sup></i> whose lengths are less than or equal",
		"ALLWORDSSHORTERTHENEND": ".",
		"ALLWORDSCONTAINING": "<i>L<sub>3</sub></i> = all words of <i>A<sup>*</sup></i> that contain",
		"ALLWORDSCONTAININGEND": "as a subword.",
		"ALLWORDSSAMEAMOUNT": "<i>L<sub>4</sub></i> = all words of <i>A<sup>*</sup></i> that contain the same number of",
		"ALLWORDSSAMEAMOUNTAND": "and",
		"ALLWORDSSAMEAMOUNTEND": "."
	},
	"REGEXPEDIT": {
		"RAILROAD": {
			"TITLE": "Syntax-Diagram",
			"NONEOF": "None of:",
			"ONEOF": "One of:",
			"ANYCHARACTER": "any character",
			"STARTOFLINE": "Start of Line",
			"ENDOFLINE": "End of Line",
			"TIMES": "+ times",
			"UPTOTIMES": "upto {{TIMES}} times",
			"GROUP": "Group {{GROUP}}",
			"REFERENCEGROUP": "Back reference (Group {{GROUP}})"
		},
		"REFERENCE": {
			"R1": "Matches the single character a",
			"R2": "Matches the sequenz of the characters a b and c in this order",
			"R3": "Matches any of the alternatives specified",
			"R4": "Matches any character between the brackets",
			"R5": "Matches any character NOT between the brackets",
			"R6": "Matches a single digit",
			"R7": "Matches any character not a digit",
			"R8": "Matches at least one n or more occurrences of n",
			"R9": "Matches zero or more occurrences of n",
			"R10": "Matches zero or one occurrences of n",
			"R11": "Matches a single character, except newline or line terminator",
			"R12": "Matches the character [. Always escape special characters!",
			"R13": "Matches a word character",
			"R14": "Matches a non-word character",
			"R15": "Matches a digit",
			"R16": "Matches a non-digit character",
			"R17": "Matches a whitespace character",
			"R18": "Matches a non-whitespace character",
			"R19": "Matches a new line character",
			"R20": "Matches a carriage return character",
			"R21": "Matches a tab character"
		}
	},
	"KFGEDIT": {
		"CREATENEWGRAMMAR": "Create new grammar",
		"EDITGRAMMAR": "Edit grammar",
		"PUBLISHTO": "Publish grammar",
		"HASSTILLERRORS": "The grammar is still incomplete.",
		"ISLEFTREGULAR": "The grammar is left-linear.",
		"ISRIGHTREGULAR": "The grammar is right-linear.",
		"ISNOTREGULAR": "The grammar is not regular.",
		"CANNOTTRANSORMWITHOUTREGULAR": "The grammar is not regular. Therefore, it can not be transformed into a NFA.",
		"TOOMANYTREES": "There are more than one, possibly infinitely many parse trees for the word <b>{{INPUT}}</b>.",
		"DERIVEERROR": "The word <b>{{INPUT}}</b> could not be derived.",
		"DELETEGRAMMAR": "Delete grammar",
		"DELETEGRAMMARASK": "Do you really want to delete the grammar {{NAME}}?",
		"MYGRAMMARS": "My grammars",
		"PRODUCTIONS": "production rules",
		"HOWTO": "<b>Here is how a grammar has to be defined in FLACI: </b><br>\n<ul>\n<li>Note the production rules.</li>\n<li>Terminal symbols <i>may be</i> included with ' (like <tt>'pi'</tt>). Wheras the terminal symbols are colored in blue the nonterminals are in red.</li>\n<li>By convention, the left-sided nonterminal of the first rule is the start symbol of the grammar.</li>\n<li>Consider for example a grammar of palindromes over {a,b}*:<br> S -&gt; a | b | EPSILON | a S a | b S b</li>\n<li>Write EPSILON for &epsilon;:<br> S -&gt; EPSILON | a</li><li>The dot notation (ellipsis) reduces the effort for writing of all rules.: <br>a ... z | 0 ... 9.</li></ul>",
		"VALIDGRAMMAR": "Valid grammar",
		"FULLGRAMMAR": "Complete grammar",
		"RENAMENONTERMINAL": "Rename nonterminal",
		"OLDNONTERMINAL": "current nonterminal",
		"NEWNONTERMINAL": "new nonterminal",
		"DERIVE": "derive",
		"RANDOMWORD": "Generate a random word of L(G) to parse",
		"SINGLESTEP": "single step mode",
		"CHECK": "check",
		"TRANSFORMATIONS": "Transf.",
		"TREESELECT": "Parse tree  {{INDEX}} of {{TOTAL}} in total",
		"SATZFORM": "sentential form",
		"USEDRULE": "applied rule",
		"CONVERTS": "Convert",
		"CONVERT": {
			"TONEA": "Transform into NFA",
			"TONEAHINT": "Transforms a regular gammar into an equivalent nondeterministic finite automaton.",
			"TONKA": "Transforms into NPDA",
			"TONKAHINT": "Transforms a context-free grammar into an equivalent nondeterministic pushdown automaton."
		},
		"TRANSFORM": {
			"CHECKLL1": "LL(1) grammar?",
			"CHECKLL1HINT": "<ul>\n<li>Requirement 1: The FIRST sets of all sentential forms representing the right hand side of the rules for a selected nonterminal have to be pairwise disjoint.</li>\n<li>Requirement 2: For each nonterminal that can be derived to É whose FIRST set and FOLLOW set have to be disjoint.</li>\n</ul>",
			"ISREGULAR": "Regular Grammar?",
			"ISREGULARHINT": "It checks if all production rules of the grammar are either in the form X &rarr; aY (right-linear) or on X &rarr; Ya (left-linear). In addition, terminal-generating rules are permitted.",
			"TOCNF": "Chomsky normal form",
			"TOCNFHINT": "<ul>\n<li>A context-free grammar G is said to be in Chomsky normal form (CNF) if all productions are in one of two simple forms, either:\n<ol>\n<li>A &rarr; a, where A is nonterminal and 'a' is a terminal and A, or</li>\n<li>A &rarr; BC, where A, B, and C are each nonterminals. </li>\n</ol>\n</li>\n<li>To put a CFG in CNF start with a grammar that has no É-rules, unit productions, or useless symbols.</li>\n<li>Arrange that all sentential forms of length 2 or more on the right hand sides of all rules consist only of nonterminals.</li>\n<li>For rules with a right hand sides length of 3 or more substitute a cascade of productions with exactly two nonterminals one their right hand.</li>\n</ul>",
			"INSERTEPSILON": "Add Îµ-rules",
			"INSERTEPSILONHINT": "To add Îµ to the CFL L(G) you have \n<ul>\n<li>to introduce a new nonterminal s' to be the new start symbol of G and</li>\n<li>to add two new rules for s', namely s' &rarr; s | Îµ, where s is the previous start symbol of G.</li>\n</ul>",
			"REMOVEEPSILON": "Remove Îµ-rules",
			"REMOVEEPSILONHINT": "<ul>\n<li>Find all m nonterminals A which are nullable, i.e., A *&rArr; É.</li>\n<li>For all rules that contain one ore more nullable symbols on their right-hand side substitute the productions with all 2<sup>m</sup> possible combinations of the given sentential form where nullable symbols are present or absent.</li>\n</ul>",
			"SIMPLIFY": "Remove useless nonterminals",
			"REMOVELOOPS": "Remove unit productions",
			"SIMPLIFYHINT": "<ul>\n<li>Nonterminals that are not reachable from the start symbol of the grammar will be removed.</li>\n<li> ... </li>\n<ul>",
			"REMOVELOOPSHINT": "<ul>\n<li>Prepare all pairs of nonterminals (A,B), where A*&rBrr; B.</li>\n<li>All productions for B are assigned to A, except for rules B &rarr; X, where X is a single nonterminal on the right.</li>\n</ul>",
			"REMOVELEFTREC": "Remove left recursion",
			"REMOVELEFTRECHINT": "<ul>\n<li>Apply the Paull's algorithm to a CFG without both É-rules and unit productions.</li>\n</ul>",
			"LEFTFACTOR": "Left factoring",
			"LEFTFACTORHINT": "The longest common prefix &alpha; of all sentential forms for a certain nonterminal X will be excluded, like this: X &rarr;\t&alpha; X', where X' defines the respective rest of the sentential form behind &alpha;."
		},
		"LL1": {
			"TITLE": "Check of the LL(1) requirements",
			"F1": "Requirement 1",
			"F2": "Requirement 2",
			"F1OK": "Requirement 1 fulfilled",
			"F2OK": "Requirement 2 fulfilled",
			"F1NOTOK": "Requirement 1 is not satisfied.",
			"F2NOTOK": "Requirement 2 is not  satisfied.",
			"TRUE": "fulfilled",
			"FALSE": "not satisfied",
			"EMPTYFIRST": "An empty FIRST-set is prohibited.",
			"NOEPSILON": "Because É is not an item of the FIRST-set, the requirement 2 is fulfilled automatically."
		},
		"GRAMMAR": "Grammar",
		"DIAGRAMMODE": "Syntax diagram",
		"TEXTMODE": "Text mode"
	},
	"BOOKTAB": "Book",
	"ABOUT": {
		"FLACILIBS": "Used libraries",
		"FLACI": "FLACI: what's all about?",
		"FLACITEXT": "FLACI (short hand for formal languages, automata, compilers, and interpeters) is a learning environment for teaching selected theoretical aspects of computer science in particular the theory of formal languages, theory of automata, and applications in the field of compiler construction. FLACI supports activities to acquire techniques of abstraction as they are increasingly used in both professional software development and high level programming concepts.",
		"FLACIREF": "FLACI is a joint research project of the <a href=\"http://www.hszg.de/\" target=\"_blank\">Hochschule Zittau/GÃ¶rlitz</a> and the <a href=\"http://www.phsz.ch/\" target=\"_blank\">PÃ¤dagogische Hochschule Schwyz</a>.",
		"FLACIBASE": "FLACI is based on experiences gained from the previous tool <a href=\"http://atocc.de/\" target=\"_blank\">AtoCC</a> from the year 2012 and running on the desktop.",
		"FLACIAUTHORS": "Project management: <a href=\"https://www.phsz.ch/forschung/institut-fuer-medien-und-schule/michael-hielscher/\" target=\"_blank\">Dr. Michael Hielscher</a> and <a href=\"https://www.hszg.de/f-ei/fakultaet/professoren/christian-wagenknecht\" target=\"_blank\">Prof. Dr. Christian Wagenknecht</a>",
		"FLACISTUDENTS": "Students who contributed to the project (names are listed in alphabetical order)",
		"FLACISTUDENTLIST": "Stefan Bradl, Ronald Krause, Dana MÃ¼ller, Alexander PreuÃ, Robert Rosenberger, Tobias Salzmann, Robert Stricker, Ralf ZÃ¼cker"
	},
	"OK": "OK",
	"ALPHABETS": "Alphabets",
	"WEBLINK": "Weblink:",
	"COPYTOCLIPBOARD": "Copy to clipboard",
	"MAKEANOTHERCOPY": "create another copy",
	"USEEXISTINGCOPY": "continue work",
	"ASKMAKEANOTHERCOPY": "You have already used this content.<br> Would you like to create another copy,<br> or continue your work from last time?"
}